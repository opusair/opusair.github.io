[
  {
    "id": "hackernews_45591799",
    "source": "Hacker News",
    "url": "https://www.apple.com/newsroom/2025/10/apple-unleashes-m5-the-next-big-leap-in-ai-performance-for-apple-silicon/",
    "title": "Apple M5 chip",
    "summary": "Apple has officially announced the forthcoming release of its M5 chip, poised to represent the next monumental leap in artificial intelligence performance within the Apple Silicon architecture. Set for an October 2025 debut, the M5 is engineered to deliver unprecedented advancements in on-device AI processing, significantly elevating the capabilities for machine learning workloads and complex neural network computations. This next-generation silicon is anticipated to integrate a vastly improved Neural Engine, purpose-built to accelerate AI tasks, thereby enabling more sophisticated and efficient execution of AI models across Apple's extensive product portfolio. The M5's enhanced architecture is designed to empower developers with robust tools for creating cutting-edge AI-powered applications, from advanced intelligent assistants and computational photography to real-time machine learning applications in professional software. This strategic move reinforces Apple's dedication to embedding powerful AI directly into its hardware, ensuring superior performance and energy efficiency for the next era of intelligent computing.",
    "keywords": [
      "Apple M5",
      "Apple Silicon",
      "AI Performance",
      "Neural Engine",
      "Machine Learning",
      "Chip Architecture",
      "On-device AI"
    ],
    "area": [
      "Artificial Intelligence",
      "Machine Learning",
      "Deep Learning"
    ],
    "published_time": "2025-10-15 13:02:53",
    "download_time": "2025-10-15 20:03:24",
    "extra_info": "{\"score\": 749, \"by\": \"mihau\", \"descendants\": 797, \"story_id\": 45591799}"
  },
  {
    "id": "hackernews_45596168",
    "source": "Hacker News",
    "url": "https://assets.anthropic.com/m/99128ddd009bdcb/original/Claude-Haiku-4-5-System-Card.pdf",
    "title": "Claude Haiku 4.5 System Card [pdf]",
    "summary": "Anthropic has released the System Card for Claude Haiku 4.5, a new iteration in its series of large language models. This document provides a comprehensive overview of Haiku 4.5's core capabilities, architectural design, and performance benchmarks. It highlights the model's efficiency and cost-effectiveness, positioning it as a highly capable yet accessible option for a wide range of applications, including advanced reasoning, content generation, and summarization tasks. The System Card also details Anthropic's rigorous approach to AI safety and responsible development, outlining the measures implemented to mitigate potential risks such as bias and harmful outputs. Furthermore, it includes insights into the model's training methodology, data considerations, and ethical deployment guidelines, offering transparency into its development and operational framework. This release aims to provide developers and researchers with the necessary information to effectively utilize and understand Claude Haiku 4.5 within various real-world scenarios, ensuring robust and ethical integration.",
    "keywords": [
      "Large Language Model",
      "AI System Card",
      "Model Evaluation",
      "AI Safety",
      "Generative AI",
      "Natural Language Processing",
      "Anthropic",
      "Claude Haiku"
    ],
    "area": [
      "Artificial Intelligence",
      "Large Language Model",
      "Natural Language Processing"
    ],
    "published_time": "2025-10-15 17:52:32",
    "download_time": "2025-10-15 20:03:23",
    "extra_info": "{\"score\": 47, \"by\": \"vinhnx\", \"descendants\": 3, \"story_id\": 45596168}"
  },
  {
    "id": "hackernews_45588689",
    "source": "Hacker News",
    "url": "https://steipete.me/posts/just-talk-to-it",
    "title": "Just talk to it – A way of agentic engineering",
    "summary": "Agentic engineering, as suggested by the title 'Just talk to it,' points to an evolving paradigm in AI development where interaction with intelligent systems shifts from explicit coding to natural language communication. This approach emphasizes building AI agents that can autonomously understand, plan, and execute tasks based on high-level, conversational instructions. It leverages the power of large language models (LLMs) and other advanced AI techniques to create systems that users can simply 'talk to' to achieve desired outcomes, much like conversing with a human expert. The core benefit lies in simplifying the development process, allowing engineers and non-technical users alike to define goals and constraints rather than meticulously specifying every operational step. This method aims to enhance productivity, accelerate innovation, and make AI technology more accessible by lowering the technical barrier to entry. It represents a move towards more intuitive and flexible AI applications, where the focus is on desired results rather than the intricate mechanics of execution.",
    "keywords": [
      "AI Agent",
      "Agentic Engineering",
      "Large Language Model",
      "Natural Language Processing",
      "Conversational AI",
      "Human-Computer Interaction"
    ],
    "area": [
      "Artificial Intelligence",
      "AI Agent",
      "Natural Language Processing"
    ],
    "published_time": "2025-10-15 06:21:04",
    "download_time": "2025-10-15 20:03:52",
    "extra_info": "{\"score\": 140, \"by\": \"freediver\", \"descendants\": 86, \"story_id\": 45588689}"
  },
  {
    "id": "hackernews_45596059",
    "source": "Hacker News",
    "url": "https://alexzhang13.github.io/blog/2025/rlm/",
    "title": "Recursive Language Models (RLMs)",
    "summary": "Recursive Language Models (RLMs) represent a significant conceptual advancement in the field of natural language processing, focusing on the inherent hierarchical and compositional structure of human language. Unlike traditional sequential language models that process text in a linear fashion, RLMs are designed to explicitly capture and leverage the recursive nature of linguistic syntax and semantics. This architectural approach allows them to build representations of phrases, clauses, and entire sentences by combining representations of their constituent parts in a structured, tree-like manner. The primary advantage of RLMs lies in their potential to enhance understanding of long-range dependencies, improve compositional generalization, and facilitate more robust semantic parsing. By integrating recursive mechanisms, these models aim to overcome limitations of purely sequential models in handling complex grammatical constructions and capturing nuanced meanings. This development could lead to more sophisticated language understanding systems capable of generating more coherent and contextually accurate text, and could find applications in advanced machine translation, dialogue systems, and information extraction, offering a promising direction for future NLP research.",
    "keywords": [
      "Recursive Language Models",
      "Natural Language Processing",
      "Deep Learning",
      "Neural Networks",
      "Compositional Models",
      "Language Modeling",
      "Hierarchical Structures"
    ],
    "area": [
      "Natural Language Processing",
      "Deep Learning",
      "Large Language Model"
    ],
    "published_time": "2025-10-15 17:43:27",
    "download_time": "2025-10-15 20:03:51",
    "extra_info": "{\"score\": 12, \"by\": \"talhof8\", \"descendants\": 2, \"story_id\": 45596059}"
  },
  {
    "id": "hackernews_45586776",
    "source": "Hacker News",
    "url": "https://simonwillison.net/2025/Oct/14/nvidia-dgx-spark/",
    "title": "Nvidia DGX Spark: great hardware, early days for the ecosystem",
    "summary": "The article delves into the potential of Nvidia's DGX Spark platform, recognizing its superior hardware as a formidable solution for demanding data processing and artificial intelligence applications. The DGX Spark is celebrated for its robust computational power, specifically engineered to accelerate complex analytical tasks and machine learning training. However, the analysis also critically observes that the broader software ecosystem supporting DGX Spark is currently in its nascent phases. This implies that while the underlying hardware provides a powerful foundation, the integrated tools, mature frameworks, and extensive community support typically found in established platforms are still under development. Consequently, enterprises considering DGX Spark should acknowledge the hardware's strength but be prepared to engage in further development or adapt to an evolving environment to fully harness its capabilities. The sustained success and widespread adoption of DGX Spark are contingent upon the progressive maturation of its software stack and the expansion of its developer community, which will be crucial for unlocking its full value proposition.",
    "keywords": [
      "Nvidia",
      "DGX Spark",
      "AI Hardware",
      "Data Processing",
      "Machine Learning",
      "Ecosystem Development",
      "High-Performance Computing"
    ],
    "area": [
      "Artificial Intelligence",
      "Machine Learning",
      "Deep Learning"
    ],
    "published_time": "2025-10-15 00:49:25",
    "download_time": "2025-10-15 20:04:08",
    "extra_info": "{\"score\": 164, \"by\": \"GavinAnderegg\", \"descendants\": 98, \"story_id\": 45586776}"
  },
  {
    "id": "hackernews_45595760",
    "source": "Hacker News",
    "url": "https://specific.dev/",
    "title": "Specific (YC F25): Build Backends with Specifications Instead of Code",
    "summary": "Specific, developed by Iman and Fabian (YC F25), has launched its public beta, offering an innovative platform for building backend APIs and services. The core value proposition is the ability to create entire backend systems using only natural-language specifications and integrated tests, circumventing traditional code writing. Specific automates the conversion of these high-level specifications into fully functional, deployable systems, alongside all required infrastructure. This approach builds upon the concept of spec-driven development, which typically involves coding agents for implementation, by elevating the specifications themselves to the primary source of truth for the system. A critical component of Specific is its support for comprehensive testing, which runs automatically to validate that the deployed system adheres precisely to the specifications and to proactively prevent any regressions. This methodology empowers developers to focus predominantly on architectural design and strategic functionality, delegating the intricate coding and deployment tasks to the automated platform, thereby promising a significant paradigm shift in backend development efficiency. The initial release concentrates on a focused set of features, laying the groundwork for future expansions.",
    "keywords": [
      "Backend Development",
      "API Design",
      "Natural Language Processing",
      "Spec-Driven Development",
      "Automated Code Generation",
      "Software Testing",
      "Infrastructure Automation"
    ],
    "area": [
      "Artificial Intelligence",
      "Natural Language Processing",
      "AI Agent"
    ],
    "published_time": "2025-10-15 17:21:32",
    "download_time": "2025-10-15 20:04:01",
    "extra_info": "{\"score\": 11, \"by\": \"fabianlindfors\", \"descendants\": 2, \"story_id\": 45595760}"
  },
  {
    "id": "prompt-eng-interactive-tutorial",
    "source": "GitHub",
    "url": "https://github.com/anthropics/prompt-eng-interactive-tutorial",
    "title": "Welcome to Anthropic's Prompt Engineering Interactive Tutorial",
    "summary": "This GitHub repository hosts Anthropic's interactive tutorial on prompt engineering for Claude, their family of large language models. The course provides a comprehensive, step-by-step understanding of how to craft optimal prompts, covering basic structures, recognizing and addressing common failure modes with '80/20' techniques, and understanding Claude's strengths and weaknesses. Structured into nine chapters with exercises and an advanced appendix, it guides users through building effective prompts from scratch for various use cases. The tutorial explores topics from clear and direct instructions, role assignment, and separating data from instructions, to advanced concepts like precognition, using examples, avoiding hallucinations, and building complex prompts for industry applications such as chatbots, legal, financial, and coding services. It also delves into advanced methods like chaining prompts, tool use, and search & retrieval. Designed for hands-on learning, it uses Claude 3 Haiku for experimentation, with an optional Google Sheets version available for enhanced user experience.",
    "keywords": [
      "Prompt Engineering",
      "Large Language Model",
      "Claude AI",
      "AI Tutorial",
      "Anthropic",
      "Natural Language Processing",
      "Interactive Learning",
      "Generative AI"
    ],
    "area": [
      "Artificial Intelligence",
      "Large Language Model",
      "Natural Language Processing"
    ],
    "published_time": "2024-04-08T03:17:07Z",
    "download_time": "2024-04-23 15:00:00",
    "extra_info": null
  },
  {
    "id": "minimind",
    "source": "GitHub",
    "url": "https://github.com/jingyaogong/minimind",
    "title": "📌 Introduction",
    "summary": "MiniMind is an innovative open-source project designed to train ultra-small language models, with its smallest version being just 25.8M parameters, achieving conversational capabilities within 2 hours and at a cost of only 3 RMB using a single NVIDIA 3090 GPU. This initiative aims to democratize LLM development by providing a complete, from-scratch PyTorch native implementation of the entire large language model lifecycle. It covers essential processes including data cleaning, pre-training, Supervised Fine-Tuning (SFT), LoRA adaptation, Direct Preference Optimization (DPO) for reinforcement learning, and model distillation. The project also features a Mixture of Experts (MoE) structure and extends to multimodal vision with MiniMind-V. Beyond its technical depth, MiniMind serves as an an accessible tutorial for LLM beginners, demonstrating full-stack LLM reproduction without reliance on high-level third-party abstractions. It ensures compatibility with mainstream frameworks like `transformers`, `trl`, `peft`, and popular inference engines such as `llama.cpp`, `vllm`, and `ollama`, promoting broader AI community engagement.",
    "keywords": [
      "Large Language Model",
      "MiniMind",
      "PyTorch",
      "Low-Resource LLM",
      "Fine-Tuning",
      "Reinforcement Learning",
      "Knowledge Distillation",
      "Mixture of Experts"
    ],
    "area": [
      "Large Language Model",
      "Deep Learning",
      "Natural Language Processing"
    ],
    "published_time": "2025-04-30T08:47:26Z",
    "download_time": "2024-05-20 10:00:00",
    "extra_info": null
  },
  {
    "id": "langchainjs",
    "source": "GitHub",
    "url": "https://github.com/langchain-ai/langchainjs",
    "title": "🦜️🔗 LangChain.js",
    "summary": "LangChain.js is a TypeScript-based framework designed for building applications powered by Large Language Models (LLMs) through composability. It facilitates the development of context-aware and reasoning-capable LLM applications, supporting diverse environments such as Node.js, Cloudflare Workers, Vercel/Next.js, and web browsers. The framework offers open-source libraries with modular building blocks, components, and extensive third-party integrations, including core packages like `@langchain/core`, `@langchain/community`, and `langchain`. It integrates LangGraph.js to enable the creation of stateful agents with advanced streaming and human-in-the-loop capabilities. For production use, LangSmith provides tools for inspecting, monitoring, and evaluating LLM chains, while LangGraph Cloud assists in deploying applications as production-ready APIs. Common application scenarios include question answering over specific documents and developing sophisticated chatbots. LangChain.js emphasizes modular components and off-the-shelf chains, streamlining development across Model I/O, Retrieval-Augmented Generation (RAG), and AI Agents. This library is also designed for seamless interoperability with its Python counterpart, allowing for object serialization and sharing.",
    "keywords": [
      "LangChain.js",
      "Large Language Model",
      "LLM Applications",
      "TypeScript",
      "AI Agent",
      "LangGraph",
      "Retrieval-Augmented Generation"
    ],
    "area": [
      "Large Language Model",
      "AI Agent",
      "Natural Language Processing"
    ],
    "published_time": "2025-10-13T20:00:08Z",
    "download_time": "2024-05-15 12:00:00",
    "extra_info": null
  },
  {
    "id": "nanoGPT",
    "source": "GitHub",
    "url": "https://github.com/karpathy/nanoGPT",
    "title": "nanoGPT",
    "summary": "nanoGPT is a streamlined, high-performance repository engineered for training and finetuning medium-sized Generative Pre-trained Transformers (GPTs) with a strong emphasis on practical efficiency and speed. Developed as a rewrite of minGPT, it successfully reproduces GPT-2 (124M) on the OpenWebText dataset, demonstrating robust performance on an 8XA100 40GB node within approximately four days. The project is notable for its concise and readable codebase, with core training and model definitions contained in just a few hundred lines of Python. This design facilitates easy customization, enabling users to train new models from scratch or finetune existing pretrained checkpoints, including various GPT-2 sizes from OpenAI. nanoGPT supports diverse computational environments, from single CPUs and GPUs to Apple Silicon Macbooks and multi-node distributed setups utilizing PyTorch Distributed Data Parallel (DDP). Its integration with PyTorch 2.0's `torch.compile()` feature further enhances training efficiency. Application scenarios range from educational character-level GPT training on Shakespearean texts to professional-grade GPT-2 reproduction and advanced finetuning tasks, making it a versatile tool for researchers and developers in the large language model domain.",
    "keywords": [
      "GPT",
      "Large Language Model",
      "Deep Learning",
      "Finetuning",
      "PyTorch",
      "Distributed Training",
      "Transformer",
      "Natural Language Processing"
    ],
    "area": [
      "Artificial Intelligence",
      "Deep Learning",
      "Large Language Model"
    ],
    "published_time": "2024-12-09T23:53:04Z",
    "download_time": "2024-01-26 07:05:00",
    "extra_info": null
  },
  {
    "id": "2510.09116",
    "source": "huggingface",
    "url": "https://huggingface.co/papers/2510.09116",
    "title": "DITING: A Multi-Agent Evaluation Framework for Benchmarking Web Novel Translation",
    "summary": "Large language models (LLMs) have substantially advanced machine translation (MT), yet their effectiveness in translating web novels remains unclear. Existing benchmarks rely on surface-level metrics that fail to capture the distinctive traits of this genre. To address these gaps, we introduce DITING, the first comprehensive evaluation framework for web novel translation, assessing narrative and cultural fidelity across six dimensions: idiom translation, lexical ambiguity, terminology localization, tense consistency, zero-pronoun resolution, and cultural safety, supported by over 18K expert-annotated Chinese-English sentence pairs. We further propose AgentEval, a reasoning-driven multi-agent evaluation framework that simulates expert deliberation to assess translation quality beyond lexical overlap, achieving the highest correlation with human judgments among seven tested automatic metrics. To enable metric comparison, we develop MetricAlign, a meta-evaluation dataset of 300 sentence pairs annotated with error labels and scalar quality scores. Comprehensive evaluation of fourteen open, closed, and commercial models reveals that Chinese-trained LLMs surpass larger foreign counterparts, and that DeepSeek-V3 delivers the most faithful and stylistically coherent translations. Our work establishes a new paradigm for exploring LLM-based web novel translation and provides public resources to advance future research.",
    "keywords": [
      "Large Language Models",
      "Machine Translation",
      "Web Novel Translation",
      "Evaluation Framework",
      "Multi-agent Evaluation"
    ],
    "area": [
      "Natural Language Processing",
      "Large Language Model",
      "AI Agent"
    ],
    "published_time": "2025-10-10T08:10:10.000Z",
    "download_time": "2025-10-15 13:04:35",
    "extra_info": "{\"url\": \"https://huggingface.co/papers/2510.09116\", \"arxiv_url\": \"https://arxiv.org/abs/2510.09116\", \"thumbnail\": \"https://cdn-thumbnails.huggingface.co/social-thumbnails/papers/2510.09116.png\", \"original_title\": \"DITING: A Multi-Agent Evaluation Framework for Benchmarking Web Novel\\n  Translation\"}"
  },
  {
    "id": "2510.12586",
    "source": "huggingface",
    "url": "https://huggingface.co/papers/2510.12586",
    "title": "Advancing End-to-End Pixel Space Generative Modeling via Self-supervised Pre-training",
    "summary": "Pixel-space generative models are often more difficult to train and generally underperform compared to their latent-space counterparts, leaving a persistent performance and efficiency gap. In this paper, we introduce a novel two-stage training framework that closes this gap for pixel-space diffusion and consistency models. In the first stage, we pre-train encoders to capture meaningful semantics from clean images while aligning them with points along the same deterministic sampling trajectory, which evolves points from the prior to the data distribution. In the second stage, we integrate the encoder with a randomly initialized decoder and fine-tune the complete model end-to-end for both diffusion and consistency models. Our training framework demonstrates strong empirical performance on ImageNet dataset. Specifically, our diffusion model reaches an FID of 2.04 on ImageNet-256 and 2.35 on ImageNet-512 with 75 number of function evaluations (NFE), surpassing prior pixel-space methods by a large margin in both generation quality and efficiency while rivaling leading VAE-based models at comparable training cost. Furthermore, on ImageNet-256, our consistency model achieves an impressive FID of 8.82 in a single sampling step, significantly surpassing its latent-space counterpart. To the best of our knowledge, this marks the first successful training of a consistency model directly on high-resolution images without relying on pre-trained VAEs or diffusion models.",
    "keywords": [
      "Generative Modeling",
      "Pixel Space",
      "Self-supervised Pre-training",
      "Diffusion Models",
      "Consistency Models"
    ],
    "area": [
      "Generative AI",
      "Deep Learning",
      "Computer Vision"
    ],
    "published_time": "2025-10-14T14:41:16.000Z",
    "download_time": "2025-10-15 13:04:34",
    "extra_info": "{\"url\": \"https://huggingface.co/papers/2510.12586\", \"arxiv_url\": \"https://arxiv.org/abs/2510.12586\", \"thumbnail\": \"https://cdn-thumbnails.huggingface.co/social-thumbnails/papers/2510.12586.png\", \"original_title\": \"Advancing End-to-End Pixel Space Generative Modeling via Self-supervised\\n  Pre-training\"}"
  },
  {
    "id": "2510.12399",
    "source": "huggingface",
    "url": "https://huggingface.co/papers/2510.12399",
    "title": "A Survey of Vibe Coding with Large Language Models",
    "summary": "The advancement of large language models (LLMs) has catalyzed a paradigm shift from code generation assistance to autonomous coding agents, enabling a novel development methodology termed \"Vibe Coding\" where developers validate AI-generated implementations through outcome observation rather than line-by-line code comprehension. Despite its transformative potential, the effectiveness of this emergent paradigm remains under-explored, with empirical evidence revealing unexpected productivity losses and fundamental challenges in human-AI collaboration. To address this gap, this survey provides the first comprehensive and systematic review of Vibe Coding with large language models, establishing both theoretical foundations and practical frameworks for this transformative development approach. Drawing from systematic analysis of over 1000 research papers, we survey the entire vibe coding ecosystem, examining critical infrastructure components including LLMs for coding, LLM-based coding agent, development environment of coding agent, and feedback mechanisms. We first introduce Vibe Coding as a formal discipline by formalizing it through a Constrained Markov Decision Process that captures the dynamic triadic relationship among human developers, software projects, and coding agents. Building upon this theoretical foundation, we then synthesize existing practices into five distinct development models: Unconstrained Automation, Iterative Conversational Collaboration, Planning-Driven, Test-Driven, and Context-Enhanced Models, thus providing the first comprehensive taxonomy in this domain. Critically, our analysis reveals that successful Vibe Coding depends not merely on agent capabilities but on systematic context engineering, well-established development environments, and human-agent collaborative development models.",
    "keywords": [
      "Vibe Coding",
      "Large Language Models",
      "Coding Agents",
      "Human-AI Collaboration",
      "Software Development"
    ],
    "area": [
      "Artificial Intelligence",
      "Large Language Model",
      "AI Agent"
    ],
    "published_time": "2025-10-14T11:26:56.000Z",
    "download_time": "2025-10-15 13:04:32",
    "extra_info": "{\"url\": \"https://huggingface.co/papers/2510.12399\", \"arxiv_url\": \"https://arxiv.org/abs/2510.12399\", \"thumbnail\": \"https://cdn-thumbnails.huggingface.co/social-thumbnails/papers/2510.12399.png\", \"original_title\": \"A Survey of Vibe Coding with Large Language Models\"}"
  },
  {
    "id": "2510.12747",
    "source": "huggingface",
    "url": "https://huggingface.co/papers/2510.12747",
    "title": "FlashVSR: Towards Real-Time Diffusion-Based Streaming Video Super-Resolution",
    "summary": "Diffusion models have recently advanced video restoration, but applying them to real-world video super-resolution (VSR) remains challenging due to high latency, prohibitive computation, and poor generalization to ultra-high resolutions. Our goal in this work is to make diffusion-based VSR practical by achieving efficiency, scalability, and real-time performance. To this end, we propose FlashVSR, the first diffusion-based one-step streaming framework towards real-time VSR. FlashVSR runs at approximately 17 FPS for 768x1408 videos on a single A100 GPU by combining three complementary innovations: (i) a train-friendly three-stage distillation pipeline that enables streaming super-resolution, (ii) locality-constrained sparse attention that cuts redundant computation while bridging the train-test resolution gap, and (iii) a tiny conditional decoder that accelerates reconstruction without sacrificing quality. To support large-scale training, we also construct VSR-120K, a new dataset with 120k videos and 180k images. Extensive experiments show that FlashVSR scales reliably to ultra-high resolutions and achieves state-of-the-art performance with up to 12x speedup over prior one-step diffusion VSR models. We will release the code, pretrained models, and dataset to foster future research in efficient diffusion-based VSR.",
    "keywords": [
      "Video Super-Resolution (VSR)",
      "Diffusion Models",
      "Real-Time Performance",
      "Streaming Framework",
      "FlashVSR"
    ],
    "area": [
      "Computer Vision",
      "Deep Learning",
      "Generative AI"
    ],
    "published_time": "2025-10-14T17:25:54.000Z",
    "download_time": "2025-10-15 13:04:35",
    "extra_info": "{\"url\": \"https://huggingface.co/papers/2510.12747\", \"arxiv_url\": \"https://arxiv.org/abs/2510.12747\", \"thumbnail\": \"https://cdn-thumbnails.huggingface.co/social-thumbnails/papers/2510.12747.png\", \"original_title\": \"FlashVSR: Towards Real-Time Diffusion-Based Streaming Video\\n  Super-Resolution\"}"
  },
  {
    "id": "2510.12773",
    "source": "huggingface",
    "url": "https://huggingface.co/papers/2510.12773",
    "title": "Dr.LLM: Dynamic Layer Routing in LLMs",
    "summary": "Large Language Models (LLMs) process every token through all layers of a transformer stack, causing wasted computation on simple queries and insufficient flexibility for harder ones that need deeper reasoning. Adaptive-depth methods can improve efficiency, but prior approaches rely on costly inference-time search, architectural changes, or large-scale retraining, and in practice often degrade accuracy despite efficiency gains. We introduce Dr.LLM, Dynamic routing of Layers for LLMs, a retrofittable framework that equips pretrained models with lightweight per-layer routers deciding to skip, execute, or repeat a block. Routers are trained with explicit supervision: using Monte Carlo Tree Search (MCTS), we derive high-quality layer configurations that preserve or improve accuracy under a compute budget. Our design, windowed pooling for stable routing, focal loss with class balancing, and bottleneck MLP routers, ensures robustness under class imbalance and long sequences. On ARC (logic) and DART (math), Dr.LLM improves accuracy by up to +3.4%p while saving 5 layers per example on average. Routers generalize to out-of-domain tasks (MMLU, GSM8k, AIME, TruthfulQA, SQuADv2, GPQA, PIQA, AGIEval) with only 0.85% accuracy drop while retaining efficiency, and outperform prior routing methods by up to +7.7%p. Overall, Dr.LLM shows that explicitly supervised routers retrofit frozen LLMs for budget-aware, accuracy-driven inference without altering base weights.",
    "keywords": [
      "Large Language Models",
      "Dynamic Layer Routing",
      "Adaptive-depth methods",
      "Computational Efficiency",
      "Monte Carlo Tree Search"
    ],
    "area": [
      "Large Language Model",
      "Deep Learning",
      "Natural Language Processing"
    ],
    "published_time": "2025-10-14T17:51:26.000Z",
    "download_time": "2025-10-15 13:04:35",
    "extra_info": "{\"url\": \"https://huggingface.co/papers/2510.12773\", \"arxiv_url\": \"https://arxiv.org/abs/2510.12773\", \"thumbnail\": \"https://cdn-thumbnails.huggingface.co/social-thumbnails/papers/2510.12773.png\", \"original_title\": \"Dr.LLM: Dynamic Layer Routing in LLMs\"}"
  },
  {
    "id": "2510.12693",
    "source": "huggingface",
    "url": "https://huggingface.co/papers/2510.12693",
    "title": "ERA: Transforming VLMs into Embodied Agents via Embodied Prior Learning and Online Reinforcement Learning",
    "summary": "Recent advances in embodied AI highlight the potential of vision language models (VLMs) as agents capable of perception, reasoning, and interaction in complex environments. However, top-performing systems rely on large-scale models that are costly to deploy, while smaller VLMs lack the necessary knowledge and skills to succeed. To bridge this gap, we present Embodied Reasoning Agent (ERA), a two-stage framework that integrates prior knowledge learning and online reinforcement learning (RL). The first stage, Embodied Prior Learning, distills foundational knowledge from three types of data: (1) Trajectory-Augmented Priors, which enrich existing trajectory data with structured reasoning generated by stronger models; (2) Environment-Anchored Priors, which provide in-environment knowledge and grounding supervision; and (3) External Knowledge Priors, which transfer general knowledge from out-of-environment datasets. In the second stage, we develop an online RL pipeline that builds on these priors to further enhance agent performance. To overcome the inherent challenges in agent RL, including long horizons, sparse rewards, and training instability, we introduce three key designs: self-summarization for context management, dense reward shaping, and turn-level policy optimization. Extensive experiments on both high-level planning (EB-ALFRED) and low-level control (EB-Manipulation) tasks demonstrate that ERA-3B surpasses both prompting-based large models and previous training-based baselines. Specifically, it achieves overall improvements of 8.4% on EB-ALFRED and 19.4% on EB-Manipulation over GPT-4o, and exhibits strong generalization to unseen tasks. Overall, ERA offers a practical path toward scalable embodied intelligence, providing methodological insights for future embodied AI systems.",
    "keywords": [
      "Embodied AI",
      "Vision Language Models",
      "Reinforcement Learning",
      "Embodied Agents",
      "Prior Learning"
    ],
    "area": [
      "AI Agent",
      "Multimodal",
      "Robotics"
    ],
    "published_time": "2025-10-14T16:25:46.000Z",
    "download_time": "2025-10-15 13:04:37",
    "extra_info": "{\"url\": \"https://huggingface.co/papers/2510.12693\", \"arxiv_url\": \"https://arxiv.org/abs/2510.12693\", \"thumbnail\": \"https://cdn-thumbnails.huggingface.co/social-thumbnails/papers/2510.12693.png\", \"original_title\": \"ERA: Transforming VLMs into Embodied Agents via Embodied Prior Learning\\n  and Online Reinforcement Learning\"}"
  }
]